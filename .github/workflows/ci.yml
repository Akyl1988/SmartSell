name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install tools & deps
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy ruff
          pip install -r requirements.txt
          # для стабильности, учитывая твои локальные логи:
          pip install tzdata "python-jose[cryptography]"

      - name: ruff (fast lint)
        run: ruff check --output-format=github .

      - name: black (format check)
        run: black --check .

      - name: isort (imports order)
        run: isort --check-only .

      - name: flake8
        run: flake8 --max-line-length=100 --exclude=alembic,venv,env,.venv

      - name: mypy
        run: mypy . --ignore-missing-imports

  test:
    name: Tests (Postgres + Redis)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_smartsell
        options: >-
          --health-cmd "pg_isready -U test_user -d test_smartsell"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio asyncpg tzdata "python-jose[cryptography]"

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      # если у тебя Alembic читает URL из env — этого достаточно
      - name: Run Alembic migrations
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_smartsell
        run: |
          alembic upgrade head

      - name: Pytest with coverage
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_smartsell
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: testing
          TESTING: "True"
          DEBUG: "False"
          # Заглушки интеграций, чтобы тесты не ходили наружу
          MOBIZON_API_KEY: test
          MOBIZON_BASE_URL: https://api.mobizon.test
          CLOUDINARY_CLOUD_NAME: test
          CLOUDINARY_API_KEY: test
          CLOUDINARY_API_SECRET: test
          TIPTOP_API_KEY: test
          TIPTOP_API_SECRET: test
          TIPTOP_API_URL: https://api.tiptop.test
          KASPI_API_KEY: test
          KASPI_API_URL: https://api.kaspi.test
          SMTP_HOST: localhost
          SMTP_PORT: 1025
          SMTP_USER: test
          SMTP_PASSWORD: test
          SMTP_FROM_EMAIL: ci@example.com
        run: |
          pytest -q --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false
