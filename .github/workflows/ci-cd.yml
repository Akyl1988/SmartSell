name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Linting and code quality
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -r requirements.txt

    - name: Run black (code formatting)
      run: black --check app/

    - name: Run isort (import sorting)
      run: isort --check-only app/

    - name: Run flake8 (linting)
      run: flake8 app/ --max-line-length=100 --exclude=migrations

    - name: Run mypy (type checking)
      run: mypy app/ --ignore-missing-imports

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@v0.33.1
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Unit and integration tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_smartsell
        options: >-
          --health-cmd "pg_isready -U test_user -d test_smartsell"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio asyncpg

    - name: Wait for PostgreSQL
      run: |
        # Wait for PostgreSQL to be ready
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"

    - name: Set up test database and run Alembic migrations
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_smartsell
        SECRET_KEY: test-secret-key
        REDIS_URL: redis://localhost:6379
        DEBUG: "False"
        TESTING: "True"
      run: |
        # Run database migrations for testing
        echo "Running Alembic migrations..."
        alembic upgrade head
        echo "Migrations completed successfully!"

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_smartsell
        SECRET_KEY: test-secret-key
        REDIS_URL: redis://localhost:6379
        DEBUG: "False"
        TESTING: "True"
        ENVIRONMENT: testing
        MOBIZON_API_KEY: test-key
        MOBIZON_API_URL: https://api.mobizon.test
        CLOUDINARY_CLOUD_NAME: test
        CLOUDINARY_API_KEY: test
        CLOUDINARY_API_SECRET: test
        TIPTOP_API_KEY: test
        TIPTOP_API_SECRET: test
        TIPTOP_API_URL: https://api.tiptop.test
        KASPI_API_KEY: test
        KASPI_API_URL: https://api.kaspi.test
        SMTP_HOST: localhost
        SMTP_PORT: 587
        SMTP_USER: test
        SMTP_PASSWORD: test
        SMTP_FROM_EMAIL: test@test.com
      run: |
        # Run tests with coverage
        python -m pytest app/tests/ --cov=app --cov-report=xml --cov-report=html -v

    - name: Upload coverage to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build Docker images
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: smartsell/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/smartsell3
          git pull origin develop
          docker-compose -f docker-compose.staging.yml down
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up -d

          # Run health check
          sleep 30
          curl -f http://localhost:8000/health || exit 1

    - name: Run smoke tests
      run: |
        # Add smoke tests here
        echo "Running smoke tests..."
        curl -f ${{ secrets.STAGING_URL }}/health

        # Additional smoke tests
        echo "Testing API endpoints..."
        curl -f ${{ secrets.STAGING_URL }}/

        # Test database connection through API
        timeout 30 bash -c 'until curl -f ${{ secrets.STAGING_URL }}/health | grep -q "healthy"; do sleep 2; done'
        echo "Smoke tests completed successfully!"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/smartsell3

          # Create backup with timestamp
          BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
          echo "Creating backup: $BACKUP_FILE"
          docker-compose exec -T db pg_dump -U smartsell smartsell > "$BACKUP_FILE"

          # Keep only last 7 days of backups
          find . -name "backup_*.sql" -type f -mtime +7 -delete

          # Deploy new version
          echo "Pulling latest changes..."
          git pull origin main

          echo "Stopping services..."
          docker-compose -f docker-compose.prod.yml down

          echo "Pulling new images..."
          docker-compose -f docker-compose.prod.yml pull

          echo "Running Alembic migrations..."
          docker-compose -f docker-compose.prod.yml run --rm app alembic upgrade head

          echo "Starting services..."
          docker-compose -f docker-compose.prod.yml up -d

          # Run health check with retries
          echo "Running health checks..."
          for i in {1..10}; do
            if curl -f http://localhost:8000/health; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, waiting..."
              sleep 10
            fi
            if [ $i -eq 10 ]; then
              echo "Health check failed after 10 attempts"
              exit 1
            fi
          done

    - name: Run production smoke tests
      run: |
        # Add production smoke tests here
        echo "Running production smoke tests..."

        # Test main endpoints
        curl -f ${{ secrets.PROD_URL }}/health
        curl -f ${{ secrets.PROD_URL }}/

        # Test API availability
        timeout 30 bash -c 'until curl -f ${{ secrets.PROD_URL }}/health | grep -q "healthy"; do sleep 2; done'

        # Test database connectivity through API (basic test)
        if curl -s ${{ secrets.PROD_URL }}/health > /dev/null; then
          echo "Database connectivity test passed"
        else
          echo "Database connectivity test failed"
          exit 1
        fi

        echo "Production smoke tests completed successfully!"

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify Slack on Success
      if: github.ref == 'refs/heads/main' && contains(needs.*.result, 'success')
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          ✅ SmartSell3 deployment completed successfully!
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Environment: Production
          Deployed by: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify Slack on Failure
      if: github.ref == 'refs/heads/main' && contains(needs.*.result, 'failure')
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          ❌ SmartSell3 deployment failed!
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Environment: Production
          Deployed by: ${{ github.actor }}
          Please check the logs and take action immediately.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify Email on Critical Failure
      if: github.ref == 'refs/heads/main' && contains(needs.*.result, 'failure')
      run: |
        # Send email notification about critical deployment failure
        echo "Critical deployment failure detected. Manual intervention required."
        # In a real scenario, this would send an email to the operations team
