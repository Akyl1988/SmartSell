[tool.poetry]
name = "SmartSell3"
version = "0.1.0"
description = "A smart selling application for e-commerce automation"
authors = ["Your Name <you@example.com>"]
packages = [{ include = "app" }]

[tool.poetry.dependencies]
python = "^3.11"

# FastAPI and core
fastapi = "^0.104.1"
uvicorn = { version = "^0.24.0", extras = ["standard"] }
python-multipart = "^0.0.6"

# Database
sqlalchemy = "^2.0.23"
alembic = "^1.13.0"
psycopg2-binary = "^2.9.10"
asyncpg = "^0.30.0"

# Data validation and settings
pydantic = "^2.8.2"
pydantic-settings = "^2.1.0"
email-validator = "^2.1.0"

# Security / auth
python-jose = { version = "^3.3.0", extras = ["cryptography"] }
passlib = { version = "^1.7.4", extras = ["bcrypt"] }

# HTTP / I/O
httpx = "^0.25.2"
aiohttp = "^3.9.1"

# Background tasks / broker
celery = "^5.3.4"
redis = "^5.0.1"

# Rate limiting
slowapi = "^0.1.9"

# Env/config
python-dotenv = "^1.0.0"

# Dates / logging
python-dateutil = "^2.8.2"
structlog = "^23.2.0"

# SQLite (для тестов/утилит)
aiosqlite = "^0.21.0"

# ---- Optional analytics used in models.company/billing (DataFrames/exports)
pandas = { version = "^2.2.2", optional = true }
pyarrow = { version = "^16.1.0", optional = true }
openpyxl = { version = "^3.1.5", optional = true }

[tool.poetry.extras]
analytics = ["pandas", "pyarrow", "openpyxl"]

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
trio = "^0.31.0"

# Linting/formatting
ruff = "^0.1.6"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pre-commit = "^3.5.0"

# DB drivers (dev)
psycopg2-binary = "^2.9.10" # дублируется умышленно в dev-группе для локальной сборки

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# ---------------- Ruff ----------------
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
]
ignore = [
  "E501",  # line too long, Black рулит длиной
  "B008",  # function calls in defaults
  "C901",  # too complex
  "E203",  # whitespace before ':'
  "W293",  # blank line contains whitespace
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["F401"]

# ---------------- Black ----------------
[tool.black]
target-version = ["py311"]
line-length = 100
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# ---------------- isort ----------------
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100

# ---------------- mypy ----------------
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
strict_optional = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
  "pytest.*",
  "pydantic_settings.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# ---------------- pytest ----------------
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=app --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
filterwarnings = [
  "ignore::DeprecationWarning",
]
