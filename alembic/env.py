from __future__ import annotations

import logging
import os
import sys
from logging.config import fileConfig
from pathlib import Path
from typing import Any

from sqlalchemy import engine_from_config, pool
from sqlalchemy.engine import Connection
from sqlalchemy.exc import OperationalError

from alembic import context

# =============================================================================
# üß≠ –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ sys.path
# =============================================================================
# –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ = –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≥–¥–µ –ª–µ–∂–∏—Ç –ø–∞–ø–∫–∞ app/
# (–æ—Å—Ç–∞–≤–ª—è—é –≤–∞—à—É –ª–æ–≥–∏–∫—É, –¥–æ–ø–æ–ª–Ω—è—é –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ–π —Ä–µ–∑–æ–ª—é—Ü–∏–µ–π –ø—É—Ç–µ–π)
THIS_DIR = Path(__file__).resolve().parent
PROJECT_ROOT = THIS_DIR.parent  # .../alembic -> –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

# =============================================================================
# üß© Alembic config –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =============================================================================
config = context.config

# –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º ini-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Alembic (–µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

logger = logging.getLogger("alembic.env")


# =============================================================================
# üì• –ó–∞–≥—Ä—É–∑–∫–∞ .env (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ; –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ‚Äî —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
# =============================================================================
def load_dotenv_silently() -> None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env/.env.local, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω python-dotenv.
    –ï—Å–ª–∏ –ø–∞–∫–µ—Ç–∞ –Ω–µ—Ç ‚Äî —Ç–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
    """
    try:
        from dotenv import load_dotenv  # type: ignore
    except Exception:
        return

    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: .env.local > .env
    for candidate in (PROJECT_ROOT / ".env.local", PROJECT_ROOT / ".env"):
        if candidate.exists():
            load_dotenv(
                dotenv_path=candidate, override=False
            )  # –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ env
            logger.info("Loaded environment from %s", candidate)


load_dotenv_silently()


# =============================================================================
# ‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ DATABASE_URL
# =============================================================================
def is_testing_env() -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ.
    """
    if os.getenv("PYTEST_CURRENT_TEST"):
        return True
    env = (os.getenv("ENVIRONMENT") or os.getenv("PYTHON_ENV") or "").lower()
    return env in {"test", "testing"}


def _get_db_url_from_settings() -> str | None:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ pydantic-–Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    app.core.config.get_settings().DATABASE_URL / TEST_DATABASE_URL
    –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ—É–¥–∞—á–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None.
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from app.core.config import get_settings  # type: ignore

        s = get_settings()
        if not s:
            return None

        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–¥ pytest
        if is_testing_env() and getattr(s, "TEST_DATABASE_URL", None):
            return str(s.TEST_DATABASE_URL)
        if getattr(s, "DATABASE_URL", None):
            return str(s.DATABASE_URL)
    except Exception as e:
        logger.debug("Skip settings import: %s", e)
    return None


def get_database_url() -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç SQLAlchemy URL –¥–ª—è Alembic –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:
    1) ALEMBIC_DATABASE_URL (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
    2) TEST_DATABASE_URL (–µ—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞)
    3) DATABASE_URL (–æ–±—ã—á–Ω–∞—è —Å—Ä–µ–¥–∞)
    4) app.core.config.Settings (–µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å)
    5) sqlalchemy.url –≤ alembic.ini
    """
    # 1) –Ø–≤–Ω—ã–π –æ–≤–µ—Ä—Ä–∞–π–¥
    url = (os.getenv("ALEMBIC_DATABASE_URL") or "").strip()
    if url:
        return url

    # 2) –¢–µ—Å—Ç–æ–≤–∞—è –ë–î
    if is_testing_env():
        url = (os.getenv("TEST_DATABASE_URL") or "").strip()
        if url:
            return url

    # 3) –ü—Ä–æ–¥/–¥–µ–≤ –ë–î
    url = (os.getenv("DATABASE_URL") or "").strip()
    if url:
        return url

    # 4) –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ pydantic Settings
    url = _get_db_url_from_settings()
    if url:
        return url.strip()

    # 5) –ò–∑ alembic.ini
    url = (config.get_main_option("sqlalchemy.url") or "").strip()
    if url:
        return url

    raise RuntimeError(
        "DATABASE_URL is not set. "
        "Set env var DATABASE_URL (or TEST_DATABASE_URL under pytest), e.g. "
        "postgresql+psycopg2://postgres:admin123@localhost:5432/smartsell2"
    )


DATABASE_URL = get_database_url()
config.set_main_option("sqlalchemy.url", DATABASE_URL)

# =============================================================================
# üóÇÔ∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# =============================================================================
# –ë–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
try:
    from app.database.base import Base  # noqa: E402
except Exception as e:
    raise RuntimeError("Failed to import Base metadata from app.database.base") from e

target_metadata = Base.metadata


# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã autogenerate ¬´—É–≤–∏–¥–µ–ª¬ª –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã.
# –ï—Å–ª–∏ –≤–∞—à app/models/__init__.py –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –≤—Å—ë ‚Äî –æ–¥–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
# –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å—é–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏.
def try_import_models() -> None:
    try:
        import app.models  # noqa: F401

        logger.info("Imported app.models for autogenerate")
    except Exception as e:
        # –ù–µ–∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∞–≤—Ç–æ–≥–µ–Ω –º–æ–∂–µ—Ç –Ω–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∏–≥–¥–µ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.
        logger.warning("Could not import app.models: %s", e)


try_import_models()

# =============================================================================
# üè∑Ô∏è Naming convention (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ Base.metadata)
# =============================================================================
if not getattr(target_metadata, "naming_convention", None):
    # –ù–µ –º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ö–µ–º—ã –≤ –≤–∞—à–∏—Ö –º–æ–¥–µ–ª—è—Ö ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
    target_metadata.naming_convention = {
        "ix": "ix_%(column_0_label)s",
        "uq": "uq_%(table_name)s_%(column_0_name)s",
        "ck": "ck_%(table_name)s_%(constraint_name)s",
        "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
        "pk": "pk_%(table_name)s",
    }


# =============================================================================
# üîç –§–∏–ª—å—Ç—Ä—ã/—Ö—É–∫–∏ Alembic
# =============================================================================
def include_object(object: Any, name: str, type_: str, reflected: bool, compare_to: Any) -> bool:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ/–≤–Ω–µ—à–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë.
    """
    # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å—Ö–µ–º—ã/—Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # if type_ == "table" and name.startswith("pg_"):
    #     return False
    return True


def process_revision_directives(context_: Any, revision: Any, directives: list[Any]) -> None:
    """
    –£–±–∏—Ä–∞–µ–º ¬´–ø—É—Å—Ç—ã–µ¬ª –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ autogenerate (—á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –ø—É—Å—Ç—ã–µ —Ä–µ–≤–∏–∑–∏–∏).
    """
    if getattr(config.cmd_opts, "autogenerate", False):
        script = directives[0]
        if script.upgrade_ops.is_empty():
            directives[:] = []
            logger.info("No schema changes detected; skipping empty revision.")


# =============================================================================
# üß™ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤/–¥–µ—Ñ–æ–ª—Ç–æ–≤
# =============================================================================
def make_context_kwargs(connection: Connection | None = None) -> dict[str, Any]:
    """
    –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è context.configure(...).
    """
    # –î–ª—è SQLite —É–¥–æ–±–Ω–æ –≤–∫–ª—é—á–∞—Ç—å batch-—Ä–µ–∂–∏–º; –¥–ª—è Postgres –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å.
    render_as_batch = False
    try:
        url = str(connection.engine.url) if connection else config.get_main_option("sqlalchemy.url")
        if url and url.startswith("sqlite"):
            render_as_batch = True
    except Exception:
        pass

    return dict(
        connection=connection,
        target_metadata=target_metadata,
        include_object=include_object,
        process_revision_directives=process_revision_directives,
        compare_type=True,  # —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫
        compare_server_default=True,  # —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å server_default (–Ω–∞–ø—Ä–∏–º–µ—Ä, now(), gen_random_uuid())
        render_as_batch=render_as_batch,  # –Ω—É–∂–µ–Ω –¥–ª—è SQLite/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ ALTER TABLE
        # include_schemas=True,          # –≤–∫–ª—é—á–∏—Ç–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ö–µ–º–∞–º–∏
        # version_table_schema="public", # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π schema –¥–ª—è alembic_version
    )


# =============================================================================
# üßµ Offline/Online –º–∏–≥—Ä–∞—Ü–∏–∏
# =============================================================================
def run_migrations_offline() -> None:
    """
    –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ offline-—Ä–µ–∂–∏–º–µ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î).
    """
    url = config.get_main_option("sqlalchemy.url")
    if not url:
        raise RuntimeError("sqlalchemy.url is not set for offline migrations")

    context.configure(
        url=url,
        target_metadata=target_metadata,
        include_object=include_object,
        process_revision_directives=process_revision_directives,
        literal_binds=True,
        compare_type=True,
        compare_server_default=True,
        render_as_batch=True,  # offline-—Ä–µ–∂–∏–º ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –≤–∫–ª—é—á–∏—Ç—å
    )

    with context.begin_transaction():
        context.run_migrations()


def _engine_options_from_env() -> dict[str, Any]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø—É–ª–∞/—ç—Ö–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """

    def _as_int(var: str, default: int) -> int:
        try:
            return int(os.getenv(var, default))
        except Exception:
            return default

    def _as_bool(var: str, default: bool) -> bool:
        val = os.getenv(var)
        if val is None:
            return default
        return str(val).lower() in {"1", "true", "yes", "y", "on"}

    return {
        "pool_size": _as_int("SQLALCHEMY_POOL_SIZE", 5),
        "max_overflow": _as_int("SQLALCHEMY_MAX_OVERFLOW", 10),
        "pool_pre_ping": _as_bool("SQLALCHEMY_POOL_PRE_PING", True),
        "pool_recycle": _as_int("SQLALCHEMY_POOL_RECYCLE", 1800),
        "echo": _as_bool("SQLALCHEMY_ECHO", False),
        # "poolclass": pool.QueuePool,   # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é; –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —è–≤–Ω–æ
    }


def run_migrations_online() -> None:
    """
    –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ online-—Ä–µ–∂–∏–º–µ (—Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º).
    """
    ini_section = config.get_section(config.config_ini_section) or {}
    ini_section = dict(ini_section)  # –∫–æ–ø–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø—Ü–∏–∏

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º URL (–º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã—à–µ)
    ini_section["sqlalchemy.url"] = config.get_main_option("sqlalchemy.url")

    # –§–æ—Ä–º–∏—Ä—É–µ–º engine —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ (future=True –¥–ª—è SQLAlchemy 1.4+/2.0)
    connectable = engine_from_config(
        ini_section,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool
        if os.getenv("ALEMBIC_DISABLE_POOL")
        else None,  # –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –ø—É–ª –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
        future=True,
    )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ raw connection –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî
    # –Ω–æ engine_from_config —É–∂–µ –∏—Ö —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤ ini_section.
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ–±–∏—Ä–∞—Ç—å create_engine(...) –≤—Ä—É—á–Ω—É—é,
    # –æ–¥–Ω–∞–∫–æ –æ—Å—Ç–∞–≤–ª—è—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º alembic.ini.

    try:
        with connectable.connect() as connection:
            logger.info("Connected to database: %s", connection.engine.url)
            context.configure(**make_context_kwargs(connection))

            with context.begin_transaction():
                context.run_migrations()
    except OperationalError as exc:
        logger.error("Database connection failed: %s", exc)
        raise
    finally:
        try:
            connectable.dispose()
        except Exception:
            pass


# =============================================================================
# ‚ñ∂Ô∏è –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =============================================================================
if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
