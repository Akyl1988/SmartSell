from __future__ import annotations

import asyncio
import logging
import os
import sys
from logging.config import fileConfig
from pathlib import Path
from typing import Any, Optional

from sqlalchemy import event, pool
from sqlalchemy.engine import Connection, Engine
from sqlalchemy.engine.create import create_engine
from sqlalchemy.engine.url import make_url
from sqlalchemy.exc import OperationalError
from sqlalchemy.ext.asyncio import AsyncEngine, create_async_engine

from alembic import context

# =============================================================================
# üß≠ –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ sys.path
# =============================================================================
THIS_DIR = Path(__file__).resolve().parent
PROJECT_ROOT = THIS_DIR.parent  # .../alembic -> –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

# =============================================================================
# üß© Alembic config –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =============================================================================
config = context.config

# –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º ini-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Alembic (–µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

logger = logging.getLogger("alembic.env")

# =============================================================================
# üïí –ë–∞–∑–æ–≤–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ –¢–ó)
# =============================================================================
# –í –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ —Å–µ–π—á–∞—Å UTC+5, –∏—Å–ø–æ–ª—å–∑—É–µ–º "Asia/Almaty".
DEFAULT_TZ = os.getenv("APP_TIMEZONE", "Asia/Almaty")


# =============================================================================
# üì• –ó–∞–≥—Ä—É–∑–∫–∞ .env (—Ç–∏—Ö–æ, –µ—Å–ª–∏ –Ω–µ—Ç python-dotenv)
# =============================================================================
def load_dotenv_silently() -> None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env/.env.local, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω python-dotenv.
    –ï—Å–ª–∏ –ø–∞–∫–µ—Ç–∞ –Ω–µ—Ç ‚Äî —Ç–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
    """
    try:
        from dotenv import load_dotenv  # type: ignore
    except Exception:
        return

    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: .env.local > .env
    for candidate in (PROJECT_ROOT / ".env.local", PROJECT_ROOT / ".env"):
        if candidate.exists():
            load_dotenv(dotenv_path=candidate, override=False)
            logger.info("Loaded environment from %s", candidate)


load_dotenv_silently()


# =============================================================================
# ‚öôÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URLs –ë–î
# =============================================================================
def is_testing_env() -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ."""
    if os.getenv("PYTEST_CURRENT_TEST"):
        return True
    env = (os.getenv("ENVIRONMENT") or os.getenv("PYTHON_ENV") or "").lower()
    return env in {"test", "testing"}


def _get_db_url_from_settings() -> Optional[str]:
    """
    –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å URL –∏–∑ pydantic-–Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    app.core.config.get_settings().DATABASE_URL / TEST_DATABASE_URL.
    –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ—É–¥–∞—á–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None.
    """
    try:
        from app.core.config import get_settings  # type: ignore

        s = get_settings()
        if not s:
            return None

        if is_testing_env() and getattr(s, "TEST_DATABASE_URL", None):
            return str(s.TEST_DATABASE_URL)
        if getattr(s, "DATABASE_URL", None):
            return str(s.DATABASE_URL)
    except Exception as e:
        logger.debug("Skip settings import: %s", e)
    return None


def get_database_url() -> str:
    """
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
      1) ALEMBIC_DATABASE_URL
      2) TEST_DATABASE_URL (–µ—Å–ª–∏ —Ç–µ—Å—Ç—ã)
      3) DATABASE_URL
      4) app.core.config.Settings
      5) sqlalchemy.url –∏–∑ alembic.ini
    """
    url = (os.getenv("ALEMBIC_DATABASE_URL") or "").strip()
    if url:
        return url

    if is_testing_env():
        url = (os.getenv("TEST_DATABASE_URL") or "").strip()
        if url:
            return url

    url = (os.getenv("DATABASE_URL") or "").strip()
    if url:
        return url

    url = _get_db_url_from_settings()
    if url:
        return url.strip()

    url = (config.get_main_option("sqlalchemy.url") or "").strip()
    if url:
        return url

    raise RuntimeError(
        "DATABASE_URL is not set. "
        "Set env var DATABASE_URL (or TEST_DATABASE_URL under pytest), e.g. "
        "postgresql+psycopg2://postgres:admin123@localhost:5432/smartsell2"
    )


DATABASE_URL = get_database_url()
config.set_main_option("sqlalchemy.url", DATABASE_URL)

# =============================================================================
# üóÇÔ∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# =============================================================================
try:
    from app.database.base import Base  # noqa: E402
except Exception as e:
    raise RuntimeError("Failed to import Base metadata from app.database.base") from e

target_metadata = Base.metadata


def try_import_models() -> None:
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏, —á—Ç–æ–±—ã autogenerate –≤–∏–¥–µ–ª –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã.
    –ï—Å–ª–∏ –≤ app/models/__init__.py –≤—Å—ë —É–∂–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è ‚Äî –æ–¥–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
    """
    try:
        import app.models  # noqa: F401

        logger.info("Imported app.models for autogenerate")
    except Exception as e:
        logger.warning("Could not import app.models: %s", e)


try_import_models()

# =============================================================================
# üè∑Ô∏è Naming convention (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ Base.metadata)
# =============================================================================
if not getattr(target_metadata, "naming_convention", None):
    target_metadata.naming_convention = {
        "ix": "ix_%(column_0_label)s",
        "uq": "uq_%(table_name)s_%(column_0_name)s",
        "ck": "ck_%(table_name)s_%(constraint_name)s",
        "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
        "pk": "pk_%(table_name)s",
    }


# =============================================================================
# üîç –§–∏–ª—å—Ç—Ä—ã/—Ö—É–∫–∏ Alembic
# =============================================================================
def include_object(object: Any, name: str, type_: str, reflected: bool, compare_to: Any) -> bool:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ/–≤–Ω–µ—à–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë.
    """
    # –ü—Ä–∏–º–µ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:
    # if type_ == "table" and name.startswith("pg_"):
    #     return False
    return True


def process_revision_directives(context_: Any, revision: Any, directives: list[Any]) -> None:
    """
    –£–¥–∞–ª—è–µ–º ¬´–ø—É—Å—Ç—ã–µ¬ª —Ä–µ–≤–∏–∑–∏–∏ –ø—Ä–∏ autogenerate, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã.
    """
    if getattr(config.cmd_opts, "autogenerate", False):
        script = directives[0]
        if script.upgrade_ops.is_empty():
            directives[:] = []
            logger.info("No schema changes detected; skipping empty revision.")


# =============================================================================
# üß™ –û–±—â–∏–µ –æ–ø—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è/—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
# =============================================================================
def _detect_sqlite(url: str) -> bool:
    try:
        return make_url(url).get_backend_name().startswith("sqlite")
    except Exception:
        return url.startswith("sqlite")


def _detect_async(url: str) -> bool:
    try:
        backend = make_url(url).get_backend_name()
        return backend.endswith("+asyncpg") or backend.startswith("async")
    except Exception:
        return "+asyncpg" in url or url.startswith("postgresql+asyncpg")


def _bool_env(name: str, default: bool) -> bool:
    v = os.getenv(name)
    if v is None:
        return default
    return str(v).strip().lower() in {"1", "true", "yes", "y", "on"}


def _int_env(name: str, default: int) -> int:
    try:
        return int(os.getenv(name, default))
    except Exception:
        return default


def make_context_kwargs(connection: Connection | None = None) -> dict[str, Any]:
    """
    –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è context.configure(...).
    """
    url = (
        str(connection.engine.url)
        if connection is not None
        else config.get_main_option("sqlalchemy.url")
    )
    render_as_batch = _detect_sqlite(url)

    include_schemas = _bool_env("ALEMBIC_INCLUDE_SCHEMAS", False)
    version_table = os.getenv("ALEMBIC_VERSION_TABLE") or "alembic_version"
    version_table_schema = os.getenv("ALEMBIC_VERSION_TABLE_SCHEMA") or None

    return dict(
        connection=connection,
        target_metadata=target_metadata,
        include_object=include_object,
        process_revision_directives=process_revision_directives,
        compare_type=True,
        compare_server_default=True,
        render_as_batch=render_as_batch,
        include_schemas=include_schemas,
        version_table=version_table,
        version_table_schema=version_table_schema,
        timezone=DEFAULT_TZ,  # —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏/–ª–æ–≥–æ–≤; —Å–∞–º–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ TZ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç
    )


# =============================================================================
# üßµ Offline –º–∏–≥—Ä–∞—Ü–∏–∏
# =============================================================================
def run_migrations_offline() -> None:
    """
    –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ offline-—Ä–µ–∂–∏–º–µ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î).
    """
    url = config.get_main_option("sqlalchemy.url")
    if not url:
        raise RuntimeError("sqlalchemy.url is not set for offline migrations")

    context.configure(
        url=url,
        target_metadata=target_metadata,
        include_object=include_object,
        process_revision_directives=process_revision_directives,
        literal_binds=True,
        compare_type=True,
        compare_server_default=True,
        render_as_batch=True,  # –æ—Ñ—Ñ–ª–∞–π–Ω –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –¥–µ—Ä–∂–∞—Ç—å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º
        include_schemas=_bool_env("ALEMBIC_INCLUDE_SCHEMAS", False),
        version_table=os.getenv("ALEMBIC_VERSION_TABLE") or "alembic_version",
        version_table_schema=os.getenv("ALEMBIC_VERSION_TABLE_SCHEMA") or None,
    )

    with context.begin_transaction():
        context.run_migrations()


# =============================================================================
# üîå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# =============================================================================
def _engine_options_from_env() -> dict[str, Any]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø—É–ª–∞/—ç—Ö–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è sync-–¥–≤–∏–∂–∫–∞.
    """
    return {
        "pool_size": _int_env("SQLALCHEMY_POOL_SIZE", 5),
        "max_overflow": _int_env("SQLALCHEMY_MAX_OVERFLOW", 10),
        "pool_pre_ping": _bool_env("SQLALCHEMY_POOL_PRE_PING", True),
        "pool_recycle": _int_env("SQLALCHEMY_POOL_RECYCLE", 1800),
        "echo": _bool_env("SQLALCHEMY_ECHO", False),
        # "poolclass": pool.QueuePool,  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "future": True,
    }


def _build_sync_engine(url: str) -> Engine:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Engine. –ï—Å–ª–∏ ALEMBIC_DISABLE_POOL=1 ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º NullPool.
    """
    opts = _engine_options_from_env()
    if _bool_env("ALEMBIC_DISABLE_POOL", False):
        opts["poolclass"] = pool.NullPool
    engine = create_engine(url, **opts)

    # –î–ª—è SQLite –≤–∫–ª—é—á–∞–µ–º foreign_keys
    if _detect_sqlite(url):

        @event.listens_for(engine, "connect")
        def _set_sqlite_pragma(dbapi_conn, _):
            cursor = dbapi_conn.cursor()
            cursor.execute("PRAGMA foreign_keys=ON")
            cursor.close()

    return engine


def _build_async_engine(url: str) -> AsyncEngine:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π AsyncEngine.
    –ü—É–ª –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ALEMBIC_DISABLE_POOL=1.
    """
    opts: dict[str, Any] = {
        "echo": _bool_env("SQLALCHEMY_ECHO", False),
        "pool_pre_ping": _bool_env("SQLALCHEMY_POOL_PRE_PING", True),
        "pool_recycle": _int_env("SQLALCHEMY_POOL_RECYCLE", 1800),
        "future": True,
    }
    if _bool_env("ALEMBIC_DISABLE_POOL", False):
        opts["poolclass"] = pool.NullPool

    return create_async_engine(url, **opts)


# =============================================================================
# üåê Online –º–∏–≥—Ä–∞—Ü–∏–∏ (sync/async)
# =============================================================================
def _run_migrations_sync(connection: Connection) -> None:
    logger.info("Connected (sync) to database: %s", connection.engine.url)
    context.configure(**make_context_kwargs(connection))
    with context.begin_transaction():
        context.run_migrations()


async def _run_migrations_async(async_engine: AsyncEngine) -> None:
    async with async_engine.connect() as connection:
        logger.info("Connected (async) to database: %s", connection.engine.url)
        await connection.run_sync(lambda conn: context.configure(**make_context_kwargs(conn)))
        await connection.run_sync(lambda conn: context.begin_transaction().__enter__())
        try:
            await connection.run_sync(lambda conn: context.run_migrations())
        finally:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            await connection.run_sync(
                lambda conn: context.get_context()._proxy._transaction.__exit__(None, None, None)
            )


def run_migrations_online() -> None:
    """
    –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ online-—Ä–µ–∂–∏–º–µ (—Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º).
    –ê–≤—Ç–æ-—Ä–µ–∂–∏–º: –µ—Å–ª–∏ URL async (postgresql+asyncpg) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º async-–≤–∞—Ä–∏–∞–Ω—Ç.
    """
    url = config.get_main_option("sqlalchemy.url")
    if not url:
        raise RuntimeError("sqlalchemy.url is not set for online migrations")

    is_async = _detect_async(url)

    try:
        if is_async:
            async_engine = _build_async_engine(url)
            try:
                asyncio.run(_run_migrations_async(async_engine))
            finally:
                try:
                    async_engine.sync_engine.dispose()
                except Exception:
                    pass
        else:
            engine = _build_sync_engine(url)
            try:
                with engine.connect() as connection:
                    _run_migrations_sync(connection)
            finally:
                try:
                    engine.dispose()
                except Exception:
                    pass
    except OperationalError as exc:
        logger.error("Database connection failed: %s", exc)
        raise


# =============================================================================
# ‚ñ∂Ô∏è –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =============================================================================
if context.is_offline_mode():
    logger.info("Running migrations in OFFLINE mode (timezone=%s)", DEFAULT_TZ)
    run_migrations_offline()
else:
    logger.info("Running migrations in ONLINE mode (timezone=%s)", DEFAULT_TZ)
    run_migrations_online()
